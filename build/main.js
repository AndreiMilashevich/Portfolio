/*! For license information please see main.js.LICENSE.txt */
(()=>{var t={614:function(t){var e;e=function(){return function(t){var e={};function s(n){if(e[n])return e[n].exports;var o=e[n]={exports:{},id:n,loaded:!1};return t[n].call(o.exports,o,o.exports,s),o.loaded=!0,o.exports}return s.m=t,s.c=e,s.p="",s(0)}([function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e){for(var s=0;s<e.length;s++){var n=e[s];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,s,n){return s&&t(e.prototype,s),n&&t(e,n),e}}(),o=s(1),a=s(3),i=function(){function t(e,s){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),o.initializer.load(this,s,e),this.begin()}return n(t,[{key:"toggle",value:function(){this.pause.status?this.start():this.stop()}},{key:"stop",value:function(){this.typingComplete||this.pause.status||(this.toggleBlinking(!0),this.pause.status=!0,this.options.onStop(this.arrayPos,this))}},{key:"start",value:function(){this.typingComplete||this.pause.status&&(this.pause.status=!1,this.pause.typewrite?this.typewrite(this.pause.curString,this.pause.curStrPos):this.backspace(this.pause.curString,this.pause.curStrPos),this.options.onStart(this.arrayPos,this))}},{key:"destroy",value:function(){this.reset(!1),this.options.onDestroy(this)}},{key:"reset",value:function(){var t=arguments.length<=0||void 0===arguments[0]||arguments[0];clearInterval(this.timeout),this.replaceText(""),this.cursor&&this.cursor.parentNode&&(this.cursor.parentNode.removeChild(this.cursor),this.cursor=null),this.strPos=0,this.arrayPos=0,this.curLoop=0,t&&(this.insertCursor(),this.options.onReset(this),this.begin())}},{key:"begin",value:function(){var t=this;this.options.onBegin(this),this.typingComplete=!1,this.shuffleStringsIfNeeded(this),this.insertCursor(),this.bindInputFocusEvents&&this.bindFocusEvents(),this.timeout=setTimeout((function(){t.currentElContent&&0!==t.currentElContent.length?t.backspace(t.currentElContent,t.currentElContent.length):t.typewrite(t.strings[t.sequence[t.arrayPos]],t.strPos)}),this.startDelay)}},{key:"typewrite",value:function(t,e){var s=this;this.fadeOut&&this.el.classList.contains(this.fadeOutClass)&&(this.el.classList.remove(this.fadeOutClass),this.cursor&&this.cursor.classList.remove(this.fadeOutClass));var n=this.humanizer(this.typeSpeed),o=1;!0!==this.pause.status?this.timeout=setTimeout((function(){e=a.htmlParser.typeHtmlChars(t,e,s);var n=0,i=t.substr(e);if("^"===i.charAt(0)&&/^\^\d+/.test(i)){var r=1;r+=(i=/\d+/.exec(i)[0]).length,n=parseInt(i),s.temporaryPause=!0,s.options.onTypingPaused(s.arrayPos,s),t=t.substring(0,e)+t.substring(e+r),s.toggleBlinking(!0)}if("`"===i.charAt(0)){for(;"`"!==t.substr(e+o).charAt(0)&&(o++,!(e+o>t.length)););var l=t.substring(0,e),c=t.substring(l.length+1,e+o),u=t.substring(e+o+1);t=l+c+u,o--}s.timeout=setTimeout((function(){s.toggleBlinking(!1),e>=t.length?s.doneTyping(t,e):s.keepTyping(t,e,o),s.temporaryPause&&(s.temporaryPause=!1,s.options.onTypingResumed(s.arrayPos,s))}),n)}),n):this.setPauseStatus(t,e,!0)}},{key:"keepTyping",value:function(t,e,s){0===e&&(this.toggleBlinking(!1),this.options.preStringTyped(this.arrayPos,this)),e+=s;var n=t.substr(0,e);this.replaceText(n),this.typewrite(t,e)}},{key:"doneTyping",value:function(t,e){var s=this;this.options.onStringTyped(this.arrayPos,this),this.toggleBlinking(!0),this.arrayPos===this.strings.length-1&&(this.complete(),!1===this.loop||this.curLoop===this.loopCount)||(this.timeout=setTimeout((function(){s.backspace(t,e)}),this.backDelay))}},{key:"backspace",value:function(t,e){var s=this;if(!0!==this.pause.status){if(this.fadeOut)return this.initFadeOut();this.toggleBlinking(!1);var n=this.humanizer(this.backSpeed);this.timeout=setTimeout((function(){e=a.htmlParser.backSpaceHtmlChars(t,e,s);var n=t.substr(0,e);if(s.replaceText(n),s.smartBackspace){var o=s.strings[s.arrayPos+1];o&&n===o.substr(0,e)?s.stopNum=e:s.stopNum=0}e>s.stopNum?(e--,s.backspace(t,e)):e<=s.stopNum&&(s.arrayPos++,s.arrayPos===s.strings.length?(s.arrayPos=0,s.options.onLastStringBackspaced(),s.shuffleStringsIfNeeded(),s.begin()):s.typewrite(s.strings[s.sequence[s.arrayPos]],e))}),n)}else this.setPauseStatus(t,e,!0)}},{key:"complete",value:function(){this.options.onComplete(this),this.loop?this.curLoop++:this.typingComplete=!0}},{key:"setPauseStatus",value:function(t,e,s){this.pause.typewrite=s,this.pause.curString=t,this.pause.curStrPos=e}},{key:"toggleBlinking",value:function(t){this.cursor&&(this.pause.status||this.cursorBlinking!==t&&(this.cursorBlinking=t,t?this.cursor.classList.add("typed-cursor--blink"):this.cursor.classList.remove("typed-cursor--blink")))}},{key:"humanizer",value:function(t){return Math.round(Math.random()*t/2)+t}},{key:"shuffleStringsIfNeeded",value:function(){this.shuffle&&(this.sequence=this.sequence.sort((function(){return Math.random()-.5})))}},{key:"initFadeOut",value:function(){var t=this;return this.el.className+=" "+this.fadeOutClass,this.cursor&&(this.cursor.className+=" "+this.fadeOutClass),setTimeout((function(){t.arrayPos++,t.replaceText(""),t.strings.length>t.arrayPos?t.typewrite(t.strings[t.sequence[t.arrayPos]],0):(t.typewrite(t.strings[0],0),t.arrayPos=0)}),this.fadeOutDelay)}},{key:"replaceText",value:function(t){this.attr?this.el.setAttribute(this.attr,t):this.isInput?this.el.value=t:"html"===this.contentType?this.el.innerHTML=t:this.el.textContent=t}},{key:"bindFocusEvents",value:function(){var t=this;this.isInput&&(this.el.addEventListener("focus",(function(e){t.stop()})),this.el.addEventListener("blur",(function(e){t.el.value&&0!==t.el.value.length||t.start()})))}},{key:"insertCursor",value:function(){this.showCursor&&(this.cursor||(this.cursor=document.createElement("span"),this.cursor.className="typed-cursor",this.cursor.innerHTML=this.cursorChar,this.el.parentNode&&this.el.parentNode.insertBefore(this.cursor,this.el.nextSibling)))}}]),t}();e.default=i,t.exports=e.default},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n,o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var s=arguments[e];for(var n in s)Object.prototype.hasOwnProperty.call(s,n)&&(t[n]=s[n])}return t},a=function(){function t(t,e){for(var s=0;s<e.length;s++){var n=e[s];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,s,n){return s&&t(e.prototype,s),n&&t(e,n),e}}(),i=(n=s(2))&&n.__esModule?n:{default:n},r=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return a(t,[{key:"load",value:function(t,e,s){if(t.el="string"==typeof s?document.querySelector(s):s,t.options=o({},i.default,e),t.isInput="input"===t.el.tagName.toLowerCase(),t.attr=t.options.attr,t.bindInputFocusEvents=t.options.bindInputFocusEvents,t.showCursor=!t.isInput&&t.options.showCursor,t.cursorChar=t.options.cursorChar,t.cursorBlinking=!0,t.elContent=t.attr?t.el.getAttribute(t.attr):t.el.textContent,t.contentType=t.options.contentType,t.typeSpeed=t.options.typeSpeed,t.startDelay=t.options.startDelay,t.backSpeed=t.options.backSpeed,t.smartBackspace=t.options.smartBackspace,t.backDelay=t.options.backDelay,t.fadeOut=t.options.fadeOut,t.fadeOutClass=t.options.fadeOutClass,t.fadeOutDelay=t.options.fadeOutDelay,t.isPaused=!1,t.strings=t.options.strings.map((function(t){return t.trim()})),"string"==typeof t.options.stringsElement?t.stringsElement=document.querySelector(t.options.stringsElement):t.stringsElement=t.options.stringsElement,t.stringsElement){t.strings=[],t.stringsElement.style.display="none";var n=Array.prototype.slice.apply(t.stringsElement.children),a=n.length;if(a)for(var r=0;r<a;r+=1){var l=n[r];t.strings.push(l.innerHTML.trim())}}for(var r in t.strPos=0,t.arrayPos=0,t.stopNum=0,t.loop=t.options.loop,t.loopCount=t.options.loopCount,t.curLoop=0,t.shuffle=t.options.shuffle,t.sequence=[],t.pause={status:!1,typewrite:!0,curString:"",curStrPos:0},t.typingComplete=!1,t.strings)t.sequence[r]=r;t.currentElContent=this.getCurrentElContent(t),t.autoInsertCss=t.options.autoInsertCss,this.appendAnimationCss(t)}},{key:"getCurrentElContent",value:function(t){return t.attr?t.el.getAttribute(t.attr):t.isInput?t.el.value:"html"===t.contentType?t.el.innerHTML:t.el.textContent}},{key:"appendAnimationCss",value:function(t){var e="data-typed-js-css";if(t.autoInsertCss&&(t.showCursor||t.fadeOut)&&!document.querySelector("["+e+"]")){var s=document.createElement("style");s.type="text/css",s.setAttribute(e,!0);var n="";t.showCursor&&(n+="\n        .typed-cursor{\n          opacity: 1;\n        }\n        .typed-cursor.typed-cursor--blink{\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      "),t.fadeOut&&(n+="\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n        }\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\n          -webkit-animation: 0;\n          animation: 0;\n        }\n      "),0!==s.length&&(s.innerHTML=n,document.body.appendChild(s))}}}]),t}();e.default=r;var l=new r;e.initializer=l},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default={strings:["These are the default values...","You know what you should do?","Use your own!","Have a great day!"],stringsElement:null,typeSpeed:0,startDelay:0,backSpeed:0,smartBackspace:!0,shuffle:!1,backDelay:700,fadeOut:!1,fadeOutClass:"typed-fade-out",fadeOutDelay:500,loop:!1,loopCount:1/0,showCursor:!0,cursorChar:"|",autoInsertCss:!0,attr:null,bindInputFocusEvents:!1,contentType:"html",onBegin:function(t){},onComplete:function(t){},preStringTyped:function(t,e){},onStringTyped:function(t,e){},onLastStringBackspaced:function(t){},onTypingPaused:function(t,e){},onTypingResumed:function(t,e){},onReset:function(t){},onStop:function(t,e){},onStart:function(t,e){},onDestroy:function(t){}},t.exports=e.default},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=function(){function t(t,e){for(var s=0;s<e.length;s++){var n=e[s];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,s,n){return s&&t(e.prototype,s),n&&t(e,n),e}}(),n=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return s(t,[{key:"typeHtmlChars",value:function(t,e,s){if("html"!==s.contentType)return e;var n=t.substr(e).charAt(0);if("<"===n||"&"===n){var o;for(o="<"===n?">":";";t.substr(e+1).charAt(0)!==o&&!(1+ ++e>t.length););e++}return e}},{key:"backSpaceHtmlChars",value:function(t,e,s){if("html"!==s.contentType)return e;var n=t.substr(e).charAt(0);if(">"===n||";"===n){var o;for(o=">"===n?"<":"&";t.substr(e-1).charAt(0)!==o&&!(--e<0););e--}return e}}]),t}();e.default=n;var o=new n;e.htmlParser=o}])},t.exports=e()}},e={};function s(n){if(e[n])return e[n].exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,s),o.exports}s.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return s.d(e,{a:e}),e},s.d=(t,e)=>{for(var n in e)s.o(e,n)&&!s.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=s(614),e=s.n(t);const n=[{name:"fancy-weather",icon:"assets/icons/fancy-weather_icon-min.png",description:{en:"<p>The Fancy-weather was created during the course of The Rolling Scopes school (EPAM Systems).\n            It is a weather-focast application. By default, the app displays weather, 3-days forecast, current time, \n            and current geographical coordinates in the place where user is located.\n            But app can display information about each city. \n            Еhe app has an integrated map that shows the current place or the required place.</p>\n            <p>The project uses such technologies as: <b>HTML5</b>, <b>CSS3</b>, <b>SASS</b>, <b>JavaScript</b>, <b>Webpack</b>.</p>",ru:"<p>Проект был создан во время прохождения курса The Rolling Scopes school (EPAM Systems). \n            Web-приложение показывает текущую погоду и прогноз погоды на три следующих дня в текущем месте или любом другом искомом месте. \n            В приложение интегрирована карта, указывающая текущее положение либо положение искомого города. Возможен выбор английского или русского языка, \n            температуры в градусах цельсия или фаренгейта.</p>\n            <p>В проекте применены: <b>HTML5</b>, <b>CSS3</b>, <b>SASS</b>, <b>JavaScript</b>, <b>Webpack</b>.</p>"},linkGit:"https://github.com/AndreiMilashevich/rsschool-cv/tree/fancy-weather",linkDemo:"https://andreimilashevich.github.io/rsschool-cv/fancy-weather/build/index.html",attr:'data-html="true" data-css="true" data-js="true" data-sass="true" data-webpack="true"'},{name:"Simple-singolo",icon:"assets/icons/singolo_icon-min.png",description:{en:"<p>The Simple-Singolo was created during the course of The Rolling Scopes school (EPAM Systems).\n          <p>The layout is laid out in three states: mobile, tablet and desktop.</p>\n          </p><p>The project uses such technologies as: <b>HTML5</b>, <b>CSS3</b>, <b>SASS</b>, <b>JavaScript</b>.</p>",ru:"<p>Приложение Simple-singolo было создано во время прохождения курса The Rolling Scopes school (EPAM Systems).</p>\n          <p>Приложение сверстано по адаптивному макету.</p>\n          <p>В проекте применены: <b>HTML5</b>, <b>CSS3</b>, <b>SASS</b>, <b>JavaScript</b>.</p>"},linkGit:"https://github.com/AndreiMilashevich/simple-singolo",linkDemo:"https://andreimilashevich.github.io/simple-singolo/simple-singolo/index",attr:'data-html="true" data-css="true" data-js="true" data-sass="true" data-webpack="false"'},{name:"Raindrops",icon:"assets/icons/raindrops-min.png",description:{en:"<p>The Rainrops Game was created during the course of The Rolling Scopes school (EPAM Systems).\n      </p><p>Math examples are written in raindrops that falls at a certain speed. \n      You must  enter the answer from keybord or numpad on right side of screen before the drop falls. \n      After the end of the game, the game statistics are displayed.</p>\n      <p>The project uses such technologies as: <b>HTML5</b>, <b>CSS3</b>, <b>SASS</b>, <b>JavaScript</b>, <b>Webpack</b>.</p>",ru:"<p>Игра Rainrops была создано во время прохождения курса The Rolling Scopes school (EPAM Systems).</p>\n      <p>Математические примеры написаны внутри капель дождя, падающих с определенной скоростью. \n      Нужно ввести пример с клавиатуры или числовой панели на экране до того как капли упадут. \n      После завершения игры на экран выводится игровая статистика.</p>\n      <p>В проекте применены: <b>HTML5</b>, <b>CSS3</b>, <b>SASS</b>, <b>JavaScript</b>, <b>Webpack</b>.</p>"},linkGit:"https://github.com/AndreiMilashevich/raindrops",linkDemo:"https://andreimilashevich.github.io/raindrops/raindrops/build/index",attr:'data-html="true" data-css="true" data-js="true" data-sass="true" data-webpack="true"'},{name:"Calculator",icon:"assets/icons/Calculator-min.png",description:{en:"<p>The Rainrops app was created during the course of The UpSkillsLab (EPAM Systems). The app is a simple calculator.</p> \n      <p>The project uses such technologies as: <b>HTML5</b>, <b>CSS3</b>, <b>SASS</b>, <b>JavaScript</b>.</p>",ru:"<p>Приложение калькулятор было создано во время прохождения курса UpSkillsLab (EPAM Systems). \n      Приложение представляет собой простой калькулятор.</p>\n      <p>В проекте применены: <b>HTML5</b>, <b>CSS3</b>, <b>JavaScript</b>.</p>"},linkGit:"https://github.com/AndreiMilashevich/calculator",linkDemo:"https://andreimilashevich.github.io/Calculator/",attr:'data-html="true" data-css="true" data-js="true" data-sass="false" data-webpack="false"'}],o={ru:{home:"Домой",skills:"Навыки",portfolio:"Портфолио",about:"Обо мне",contacts:"Контакты",strings:["Привет!","Я Андрей!","и я Web разработчик!"],learn:"<p>Узнать больше</p>",skillsHeader:"Технические навыки",name:"<p>Имя</p>",namePlaceholder:"Введите ваше имя",emailPlaceholder:"Введите ваш email",textarea:"Ваше сообщение",textareaPlaceholder:"Введите ваше сообщение",submit:"Отправить сообщение",demo:"Демонстрация",aboutDescription:"<b>Пара слов обо мне:</b><br/>\n    <ul>\n    <li> Окончил авиационный факультет Военной академии Республики Беларусь.</li>\n    <li> Специальность: Техническая эксплуатация пилотируемых летательных аппаратов и их силовых установок.</li>\n    <li> В авиации добился больших высот, став инженером инженерно-авиационной службы авиационной эскадрильи (на Ил-76, Ан-26), но это потолок развития авиационного инженера.</li>\n    <li> Решил открыть для себя новые горизонты и прошел курсы: SkillUp(Ukraine) - Basic Web and SQL for software\n    testing (2020) и «The Rolling Scopes school» (EPAM Systems)\n    (2021).</li>\n    <li> English: A2 - Pre-intermediate.</li></ul>"},en:{home:"Home",skills:"Skills",portfolio:"Portfilio",about:"About me",contacts:"Contacts",strings:["Hello!","I'm Andrei!","I'm a Web Developer!"],learn:"<p>Learn more about what I do</p>",skillsHeader:"Skills",name:"<p>Name</p>",namePlaceholder:"Enter your name",emailPlaceholder:"Enter your email",textarea:"Your message",textareaPlaceholder:"Enter your message",submit:"Send message",demo:"Demo",aboutDescription:"<b>A couple of words about me:</b><br/>\n    <ul>\n    <li>Education: Military Academy of the Republic of Belarus\n    (2011). Aviation faculty.</li>\n    <li>Specialty: Technical exploitation of manned aircrafts and\n    their power units.</li>\n    <li>Previous job: Engineer of the aviation engineering department\n    of the aviation squadron (IL-76, An-26).</li>\n    <li>Courses: SkillUp(Ukraine) - Basic Web and SQL for software\n    testing (2020) and «The Rolling Scopes school» (EPAM Systems)\n    (2021).</li>\n    <li>English: A2 - Pre-intermediate.</li></ul>"}},a=document.querySelector(".skills_wrapper"),i=document.querySelector(".portfolio_button_container"),r=document.querySelector(".portfolio_wrapper"),l=Array.from(document.querySelectorAll(".about_me_image_item")),c=document.querySelector(".preloader_wrapper"),u=document.querySelector(".circle"),p=document.querySelector(".button_skills"),d=document.querySelector(".button_home"),h=document.querySelector(".button_portfolio"),m=document.querySelector(".button_about_me"),f=document.querySelector(".button_contacts"),g=document.querySelector(".learn_more"),y=document.querySelector(".submit"),b=document.querySelector(".en"),v=document.querySelector(".ru"),S=document.querySelector(".skills"),k=document.querySelector(".portfolio"),_=document.querySelector(".about_me"),C=document.querySelector(".contact_section"),T=document.querySelector("header"),L=document.querySelector(".skills_header"),w=document.querySelector(".portfolio_header"),P=document.querySelector(".about_me_header"),E=document.querySelector(".contact_header"),A=document.querySelector("#name"),x=document.querySelector(".name"),q=document.querySelector("#email"),M=document.querySelector("#message"),H=document.querySelector(".message"),O=document.querySelector(".about_me_description");let $="en";const j={strings:o[`${$}`].strings,typeSpeed:60,backDelay:1200,backSpeed:43,loop:!0,fadeOut:!1};let B=new(e())(".typed",j);function I(t){t.forEach(((t,e)=>{let s;s=e%2==0?"up":"down",r.insertAdjacentHTML("beforeend",`<div class="portfolio_item" data-aos="flip-${s}" \n    data-aos-anchor-placement="bottom-center" data-aos-duration="1000" data-aos-anchor=".portfolio_header" data-aos-delay="${500*e}"\n    data-aos-anchor-placement="center-bottom " ${n[e].attr}>\n    <h3>${t.name}</h3>\n    <div class="portfolio_item_body">\n      <div class="portfolio_item_image" style="background-image: url('${t.icon}')" data-type='image' data-place='portfolio'></div>\n      <div class="portfolio_item_description"><p>${t.description[`${$}`]}</p></div>  \n    </div>\n    <div class="portfolio_item_button_container button" >\n      <a href="${t.linkDemo}" target="_blank" rel="noopener">\n        <div class="portfolio_button_item">${o[`${$}`].demo}</div>\n      </a>\n      <a href="${t.linkGit}" target="_blank" rel="noopener">\n        <div class="portfolio_button_item">GitHub</div>\n      </a>\n    </div>\n  </div>`)}))}function D(t,e=T.offsetHeight){window.scrollTo({left:0,top:t.offsetTop-e+1,behavior:"smooth"})}function N(t,e,s){if(e===t)for(let e=0;e<s.length;e++)s[e].classList.add("hidden"),"true"===s[e].dataset[t]&&s[e].classList.remove("hidden")}function R(){B.destroy(),d.textContent=o[`${$}`].home,p.textContent=o[`${$}`].skills,h.textContent=o[`${$}`].portfolio,f.textContent=o[`${$}`].contacts,m.textContent=o[`${$}`].about,g.innerHTML=o[`${$}`].learn,L.textContent=o[`${$}`].skillsHeader,w.textContent=o[`${$}`].portfolio,P.textContent=o[`${$}`].about,E.textContent=o[`${$}`].contacts,A.placeholder=o[`${$}`].namePlaceholder,x.innerHTML=o[`${$}`].name,q.placeholder=o[`${$}`].emailPlaceholder,M.placeholder=o[`${$}`].textareaPlaceholder,H.textContent=o[`${$}`].textarea,y.value=o[`${$}`].textareaPlaceholder,j.strings=o[`${$}`].strings,O.innerHTML=o[`${$}`].aboutDescription,B=new(e())(".typed",j),"en"===$?(b.classList.add("lang_active"),v.classList.remove("lang_active")):(v.classList.add("lang_active"),b.classList.remove("lang_active"))}null===localStorage.getItem("language")?localStorage.setItem("language","en"):$=localStorage.getItem("language"),R(),I(n),[{description:"HTML5",icon:"assets/icons/html5_icon.png"},{description:"CSS3",icon:"assets/icons/css3_icon.png"},{description:"JavaScript",icon:"assets/icons/js_icon.png"},{description:"SASS",icon:"assets/icons/sass_icon.png"},{description:"Git",icon:"assets/icons/git_icon.png"},{description:"GitHub",icon:"assets/icons/github_icon.png"},{description:"Webpack",icon:"assets/icons/webpack_icon.png"},{description:"React.js",icon:"assets/icons/react.png"}].forEach(((t,e)=>{const s=document.createElement("div"),n=document.createElement("div"),o=document.createElement("p");s.className="skills_item",s.setAttribute("data-aos","flip-left"),s.setAttribute("data-aos-delay",200*e),s.setAttribute("data-aos-duration",1e3),n.className="skills_image",o.className="skills_description",n.style.backgroundImage=`url(${t.icon})`,o.textContent=t.description,s.appendChild(n),s.appendChild(o),a.appendChild(s)})),[{name:"All"},{name:"HTML5"},{name:"CSS3"},{name:"SASS"},{name:"JS"},{name:"Webpack"}].forEach(((t,e)=>{const s=document.createElement("div");s.className="portfolio_button_item",s.textContent=t.name,s.setAttribute("data-aos","fade-down"),s.setAttribute("data-aos-delay",200*e/2),s.setAttribute("data-aos-duration",500),s.setAttribute("data-button",t.name.toLowerCase()),i.appendChild(s)})),p.addEventListener("click",(()=>D(S))),g.addEventListener("click",(()=>D(S))),d.addEventListener("click",(()=>D(0,0))),h.addEventListener("click",(()=>D(k))),m.addEventListener("click",(()=>D(_))),f.addEventListener("click",(()=>D(C))),b.addEventListener("click",(()=>{r.innerHTML="",$=b.dataset.lang,localStorage.setItem("language","en"),R(),I(n)})),v.addEventListener("click",(()=>{r.innerHTML="",$=v.dataset.lang,localStorage.setItem("language","ru"),R(),I(n)})),window.addEventListener("scroll",function(t,e,s){let n;return function(){const e=this,o=arguments,a=function(){n=null,t.apply(e,o)},i=s;clearTimeout(n),n=setTimeout(a,400),i&&t.apply(e,o)}}((()=>{const t=Array.from(document.querySelectorAll(".portfolio_item_image"));l.forEach((t=>t.classList.remove("about_me_image_item_large"))),t.forEach((t=>t.classList.remove("portfolio_item_image_active")));const e=window.pageYOffset;h.classList.remove("active"),d.classList.remove("active"),e>=S.offsetTop-T.offsetHeight&&e+T.offsetHeight<k.offsetTop?p.classList.add("active"):p.classList.remove("active"),e>=k.offsetTop-T.offsetHeight&&e<=k.offsetTop+k.offsetHeight&&h.classList.add("active"),e>=_.offsetTop-T.offsetHeight&&e<=_.offsetTop+_.offsetHeight?m.classList.add("active"):m.classList.remove("active"),e>=C.offsetTop-T.offsetHeight&&e<=C.offsetTop+C.offsetHeight?f.classList.add("active"):f.classList.remove("active"),e<S.offsetTop-T.offsetHeight&&d.classList.add("active")}))),i.addEventListener("click",(t=>{const e=Array.from(document.querySelectorAll(".portfolio_item")),s=t.target.dataset.button;void 0!==s&&(Array.from(document.querySelectorAll(".portfolio_button_item")).forEach((t=>{t.classList.remove("portfolio_active")})),t.target.classList.add("portfolio_active"),e.forEach((t=>{t.classList.remove("hidden")})),N("html",s,e),N("css",s,e),N("sass",s,e),N("js",s,e),N("webpack",s,e))})),document.body.addEventListener("click",(t=>{const e=Array.from(document.querySelectorAll(".portfolio_item_image"));"image"===t.target.dataset.type&&"about"===t.target.dataset.place?t.target.classList.toggle("about_me_image_item_large"):"image"===t.target.dataset.type&&"portfolio"===t.target.dataset.place?t.target.classList.toggle("portfolio_item_image_active"):(l.forEach((t=>t.classList.remove("about_me_image_item_large"))),e.forEach((t=>t.classList.remove("portfolio_item_image_active"))))})),window.addEventListener("load",(()=>{u.classList.remove("loader"),c.classList.toggle("preloader_hidden")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,